variables:
  WINDOWS_IMAGE: 'registry.freedesktop.org/gstreamer/gstreamer/amd64/windows:2025-02-23.0-main'
  MESON_ARGS: --werror --fatal-meson-warnings

.build windows:
  image: $WINDOWS_IMAGE
  stage: 'build'
  tags:
    - 'docker'
    - 'windows'
    - '2022'
  variables:
    # Uncomment the following key if need to pass custom args, as well with the
    # $env:MESON_ARGS line in the `script:` blocks
    # MESON_ARGS: >-
    #   -Dfoo=enabled
    #   -Dbar=false
    # Make sure any failure in PowerShell scripts is fatal
    ErrorActionPreference: 'Stop'
    WarningPreference: 'Stop'
  before_script:
    - pip3 install -U meson
  script:
    # For some reason, options are separated by newline instead of space, so we
    # have to replace them first.
    # - $env:MESON_ARGS = $env:MESON_ARGS.replace("`n"," ")

    # Gitlab executes PowerShell in docker, but VsDevCmd.bat is a batch script.
    # Environment variables substitutions is done by PowerShell before calling
    # cmd.exe, that's why we use $env:FOO instead of %FOO%
    - cmd.exe /C "C:\BuildTools\Common7\Tools\VsDevCmd.bat -host_arch=amd64 -arch=$env:ARCH &&
        meson build $env:MESON_ARGS &&
        ninja -C build"

vs2017 amd64:
  extends: '.build windows'
  variables:
    ARCH: 'amd64'

vs2017 x86:
  extends: '.build windows'
  variables:
    ARCH: 'x86'

msys2:
  extends: '.build windows'
  allow_failure: true
  script:
    # Copied from https://gitlab.freedesktop.org/gstreamer/gstreamer/-/blob/main/.gitlab-ci.yml
    # Make sure powershell exits on errors
    # https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-6
    - $ErrorActionPreference = "Stop"

    # Configure MSYS2 to use the UCRT64 environment, start in the same directory
    # and inherit PATH
    - $env:MSYSTEM = "UCRT64"
    - $env:CHERE_INVOKING = "1"
    - $env:MSYS2_PATH_TYPE = "inherit"
    # For some reason, options are separated by newline instead of space, so we
    # have to replace them first.
    - $env:MESON_ARGS = $env:MESON_ARGS.replace("`n"," ")
    # Replace forward slashes with backwards so bash doesn't complain
    - $env:_PROJECT_DIR = $env:CI_PROJECT_DIR.replace('\','/')
    - C:\msys64\usr\bin\bash -lc "meson --werror build $env:MESON_ARGS && ninja -C build && ninja -C build test"

debian sid:
  image: 'debian:sid'
  stage: build
  variables:
    DEPENDENCIES: >
      meson
      ninja-build
      build-essential
  before_script:
    - apt-get update
    - apt-get install --yes ${DEPENDENCIES}
  script:
    - meson setup $MESON_ARGS build/
    - meson compile -C build/
    - meson test -C build/
    - meson install -C build/
  artifacts:
    paths:
      - build/meson-logs/
